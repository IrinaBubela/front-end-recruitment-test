@layout('layouts/main')
@set('title', 'Contact')

@section('body')


<div class="container">
  <div class="container-form">
    <form id="signup">
      <div class="personal-info">
        <span class="title">
          <div>1</div>
          Personal information
        </span>
        <div class="form-line" style="display:flex; margin-top: 0">
          <div class="form-group">
            <label class="form-control-label" for="firstName">First Name</label>
            <input class="form-control" type="text" id="firstName" name="firstName" placeholder="Elon">
            <small></small>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="lastName">Last Name</label>
            <input class="form-control" type="text" id="lastName" name="lastName" placeholder="Musk">
            <small></small>
          </div>
        </div>
        <div class="form-line">
          <div class="form-group-line">
            <label class="form-control-label" for="email">Email</label>
            <input class="form-control" type="text" id="email" name="email" placeholder="elon@spacex.com">
            <small></small>
          </div>
        </div>
        <div class="form-line">
          <div class="form-group">
            <label class="form-control-label" for="country">Country</label>
            <input class="form-control" type="text" id="country" name="country" placeholder="United States">
            <small></small>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="postalCode">Postal Code</label>
            <input class="form-control" type="number" id="postalCode" name="postalCode" placeholder="10001">
            <small></small>
          </div>
        </div>
        <div class="form-line">
          <div class="form-group-line">
            <label class="form-control-label" for="phone">Phone Number</label>
            <input class="form-control" type="number" id="phone" name="phone" placeholder="(212) 692-93-92">
            <small></small>
          </div>
        </div>
      </div>

      <div class="personal-info">
        <span class="title">
          <div>2</div>
          Payment Details <img src="/images/padlock.png"></img>
        </span>
        <div class="form-line" style="display:flex; margin-top: 0">
          <div class="form-group-line">
            <label class="form-control-label" for="creditCard">Credit Card Number</label>
            <input class="form-control" type="text" id="creditCard" name="creditCard" placeholder="0000 - 0000 - 0000 - 0000">
            <img class="visa-img" src="/images/visa.svg"></img>
            <small></small>
          </div>
        </div>
        <div class="form-line" style="display:flex; justify-content: space-between">
          <div class="form-group">
            <label class="form-control-label" for="CVV">Security Code</label>
            <input class="form-control" style="-webkit-text-security: square;" type="password" id="CVV" name="CVV" placeholder="***"  autocomplete="on">
            <small></small>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="expDate">Expiration Date</label>
            <input class="form-control" type="text" id="expDate" name="expDate" placeholder="MM / YY">
            <small></small>
          </div>
        </div>
        <div class="form-line">
          <button class="btn-complete"><img src="/images/shopping-cart.png"></img>Complete Purchase</button>
        </div>
      </div>
    </form>
  </div>
  <div class="container-receipt">
    <div class="card">
      <div class="card-inner">
        <div class="card-section">
          <div class="card-title">Your order</div>
          <div class="card-item">
            <span>Apple Watch sport</span>
            <span>$ 580</span>
          </div>
          <div class="card-item">
            <span>Modern Buckle</span>
            <span>$ 380</span>
          </div>
        </div>
       <div class="card-section">
        <div class="card-item">
          <span>Total Purchases</span>
          <span>$ 960.00</span>
        </div>
        <div class="card-item">
          <span>Estimated tax</span>
          <span>$ 0</span>
        </div>
      </div>
      <div class="card-section">
        <div class="card-item">
          <span>Total</span>
          <span>$ 960</span>
        </div>
      </div>
      </div>
    </div>
  </div>
</div>
<div class="success-msg">
  <i class="fa fa-check"></i>
  This is a success message.
</div>
<div class="warning-msg">
  <i class="fa fa-warning"></i>
  This is a warning message.
</div>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script>
const firstName = document.querySelector('#firstName');
const lastName = document.querySelector('#lastName');
const emailEl = document.querySelector('#email');
const phone = document.querySelector('#phone');
const postalCode = document.querySelector('#postalCode');
const creditCard = document.querySelector('#creditCard');
const CVV = document.querySelector('#CVV');
const expDate = document.querySelector('#expDate');

const form = document.querySelector('#signup');

form.addEventListener('input', function (e) {
    switch (e.target.id) {
      case 'email':
        checkEmail();
        break;
      case 'firstName':
        checkFirstName();
        break;
      case 'lastName':
        checkLastName();
        break;
      case 'phone':
        checkPhoneNumber();
        break;
      case 'postalCode':
        checkPostalCode();
        break;
      case 'creditCard':
        checkcreditCard();
        break;
      case 'CVV':
        checkCVV();
        break;
      case 'expDate':
        checkExpDate();
        break;
    }
});

const checkEmail = () => {
    let valid = false;
    const email = emailEl.value.trim();
    if (!isRequired(email)) {
        showError(emailEl, 'Email cannot be blank.');
    } else if (!isEmailValid(email)) {
        showError(emailEl, 'Email is not valid.')
    } else {
        showSuccess(emailEl);
        valid = true;
    }
    return valid;
}

const checkFirstName = () => {
    let valid = false;
    const min = 3,
        max = 25;
    const username = firstName.value.trim();

    if (!isRequired(username)) {
        showError(firstName, 'First cannot be blank.');
    } else if (!isBetween(username.length, min, max)) {
        showError(firstName, `First must be between ${min} and ${max} characters.`)
    } else {
        showSuccess(firstName);
        valid = true;
    }
    return valid;
}

const checkLastName = () => {
    let valid = false;
    const min = 3,
        max = 25;
    const username = lastName.value.trim();

    if (!isRequired(username)) {
        showError(lastName, 'Last name cannot be blank.');
    } else if (!isBetween(username.length, min, max)) {
        showError(lastName, `Last name must be between ${min} and ${max} characters.`)
    } else {
        showSuccess(lastName);
        valid = true;
    }
    return valid;
}

const checkPhoneNumber = () => {
    let valid = false;
    const min = 9,
        max = 9;
    const phoneNumber = phone.value.trim();

    if (!isRequired(phoneNumber)) {
        showError(phone, 'Phone Number cannot be blank.');
    } else if (!isBetween(phoneNumber.length, min, max)) {
        showError(phone, `Phone Number must have ${min} characters.`)
    } else {
        showSuccess(phone);
        valid = true;
    }
    return valid;
}

const checkPostalCode = () => {
    let valid = false;
    const count = 5;
    const postalCodeValue = postalCode.value.trim();

    if (!isRequired(postalCodeValue)) {
        showError(postalCode, 'Postal Code cannot be blank.');
    } else if (!(postalCodeValue.length == count)) {
        showError(postalCode, `Postal Code must have ${count} characters.`)
    } else {
        showSuccess(postalCode);
        valid = true;
    }
    return valid;
}

const checkcreditCard = () => {
    let valid = false;
    const count = 16;
    const cardNumber = creditCard.value.trim();

    if (!isRequired(cardNumber)) {
        showError(creditCard, 'Card Number cannot be blank.');
    } else if (!(cardNumber.length == count)) {
        showError(creditCard, `Card Number must have ${count} characters.`)
    } else {
        showSuccess(creditCard);
        valid = true;
    }
    return valid;
}

const checkCVV= () => {
    let valid = false;
    const count = 3;
    const cvvValue = CVV.value.trim();

    if (!isRequired(cvvValue)) {
        showError(CVV, 'Security Code cannot be blank.');
    } else if (!(cvvValue.length == count)) {
        showError(CVV, `Security Code must have ${count} characters.`)
    } else {
        showSuccess(CVV);
        valid = true;
    }
    return valid;
}

const checkExpDate= () => {
    let valid = false;
    const expDateValue = expDate.value.trim();

    if (!isRequired(expDateValue)) {
        showError(expDate, 'Expiration Date cannot be blank.');
    } else if (!isExpDateValid(expDateValue)) {
        showError(expDate, `Expiration Date is not valid.`)
    } else {
        showSuccess(expDate);
        valid = true;
    }
    return valid;
}


const isRequired = value => value === '' ? false : true;
const isBetween = (length, min, max) => length < min || length > max ? false : true;

const isEmailValid = (email) => {
    const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
};

const isExpDateValid = (expDate) => {
  const re =/^(0[1-9]|1[0-2])\/?([0-9]{4}|[0-9]{2})$/;
  return re.test(expDate);
}

const showError = (input, message) => {
    const formField = input.parentElement;
    formField.classList.remove('success');
    formField.classList.add('error');

    const error = formField.querySelector('small');
    error.textContent = message;
};

const showSuccess = (input) => {
    const formField = input.parentElement;

    formField.classList.remove('error');
    formField.classList.add('success');
    
    const error = formField.querySelector('small');
    error.textContent = '';
}

/* POST REQUEST*/
form.onsubmit = function(e) {
  e.preventDefault();
  let formData = new FormData(form);

  axios.post('/order', formData)
    .then(res=> {
      alert(res.data.message)
    }).catch(error => {
      alert(error);
    })
}

</script>
@end

